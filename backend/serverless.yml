service:
  name: Pintar-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
    tracing:
    lambda: true
    ApiGateway: true

    name: aws
    runtime: nodejs12.x

    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'ap-southeast-1'}

    environment:
      REGION: ${opt:region, 'ap-southeast-1'}
      SESSION_TABLE: PINTAR-session-${self:provider.stage}
      USER_TABLE: PINTAR-user-${self:provider.stage}
      CREATED_AT_INDEX: CreatedAtIndex
      USER_IMAGES_S3_BUCKET: pintar-user-${self:provider.stage}
      SESSION_IMAGES_S3_BUCKET: pintar-session-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 300
      


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Pintar API
        description: Serverless application for todo list
    models:
     
      

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    
  GetUsers:
    handler: src/lambda/http/users/getUser.handler
    events:
      - http:
          method: get
          path: users
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  CreateUser:
    handler: src/lambda/http/users/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          authorizer: Auth
          documentation:
            summary: Create a new user
            description: Create a new user
            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  UpdateProfile:
    handler: src/lambda/http/users/updateUser.updateProfile
    events:
      - http:
          method: patch
          path: users/profile
          cors: true
          authorizer: Auth
          documentation:
            summary: Update user profile
            description: Update user profile
           
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  UpdateUserType:
    handler: src/lambda/http/users/updateUser.updateUserType
    events:
      - http:
          method: patch
          path: users/type
          cors: true
          authorizer: Auth
          documentation:
            summary: Update user type to student or parent
            description: Update user type to student or parent
         
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  DeleteUser:
    handler: src/lambda/http/users/deleteUser.handler
    events:
      - http:
          method: delete
          path: users
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  UserGenerateUploadUrl:
    handler: src/lambda/http/users/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: users/photoUrl
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.USER_IMAGES_S3_BUCKET}/*


resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
        

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # S3 =================================================================================
    SessionBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SESSION_IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    UserBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.USER_IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicyUser:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::pintar-user-${self:provider.stage}/*'
        Bucket: !Ref UserBucket
    BucketPolicySession:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::pintar-session-${self:provider.stage}/*'
        Bucket: !Ref SessionBucket
    
    # DynamoDB =================================================================================
    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SESSION_TABLE} 
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          # - AttributeName: studentId
          #   AttributeType: S
          # - AttributeName: tutorId
          #   AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        # LocalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
        #     KeySchema:
        #       - AttributeName: tutorId
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: ALL # What attributes will be copied to an index

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: emailMain
          #   AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        # LocalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
        #     KeySchema:
        #       - AttributeName: emailMain
        #         KeyType: HASH
        #       - AttributeName: emailMain
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: ALL # What attributes will be copied to an index


